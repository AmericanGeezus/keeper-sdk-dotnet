// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enterprise.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Enterprise {

  /// <summary>Holder for reflection information generated from enterprise.proto</summary>
  public static partial class EnterpriseReflection {

    #region Descriptor
    /// <summary>File descriptor for enterprise.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EnterpriseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBlbnRlcnByaXNlLnByb3RvEgpFbnRlcnByaXNlIoQBChhFbnRlcnByaXNl",
            "S2V5UGFpclJlcXVlc3QSGwoTZW50ZXJwcmlzZVB1YmxpY0tleRgBIAEoDBIl",
            "Ch1lbmNyeXB0ZWRFbnRlcnByaXNlUHJpdmF0ZUtleRgCIAEoDBIkCgdrZXlU",
            "eXBlGAMgASgOMhMuRW50ZXJwcmlzZS5LZXlUeXBlIicKFEdldFRlYW1NZW1i",
            "ZXJSZXF1ZXN0Eg8KB3RlYW1VaWQYASABKAwiVQoORW50ZXJwcmlzZVVzZXIS",
            "GAoQZW50ZXJwcmlzZVVzZXJJZBgBIAEoAxINCgVlbWFpbBgCIAEoCRIaChJl",
            "bnRlcnByaXNlVXNlcm5hbWUYAyABKAkiSwoVR2V0VGVhbU1lbWJlclJlc3Bv",
            "bnNlEjIKDmVudGVycHJpc2VVc2VyGAEgAygLMhouRW50ZXJwcmlzZS5FbnRl",
            "cnByaXNlVXNlciItChFFbnRlcnByaXNlVXNlcklkcxIYChBlbnRlcnByaXNl",
            "VXNlcklkGAEgAygDIkIKGUVudGVycHJpc2VQZXJzb25hbEFjY291bnQSDQoF",
            "ZW1haWwYASABKAkSFgoOT0JTT0xFVEVfRklFTEQYAiABKAwiUwoXRW5jcnlw",
            "dGVkVGVhbUtleVJlcXVlc3QSDwoHdGVhbVVpZBgBIAEoDBIYChBlbmNyeXB0",
            "ZWRUZWFtS2V5GAIgASgMEg0KBWZvcmNlGAMgASgIIisKD1JlRW5jcnlwdGVk",
            "RGF0YRIKCgJpZBgBIAEoAxIMCgRkYXRhGAIgASgJIj8KElJlRW5jcnlwdGVk",
            "Um9sZUtleRIPCgdyb2xlX2lkGAEgASgDEhgKEGVuY3J5cHRlZFJvbGVLZXkY",
            "AiABKAwinQIKG05vZGVUb01hbmFnZWRDb21wYW55UmVxdWVzdBIRCgljb21w",
            "YW55SWQYASABKAUSKgoFbm9kZXMYAiADKAsyGy5FbnRlcnByaXNlLlJlRW5j",
            "cnlwdGVkRGF0YRIqCgVyb2xlcxgDIAMoCzIbLkVudGVycHJpc2UuUmVFbmNy",
            "eXB0ZWREYXRhEioKBXVzZXJzGAQgAygLMhsuRW50ZXJwcmlzZS5SZUVuY3J5",
            "cHRlZERhdGESMAoIcm9sZUtleXMYBSADKAsyHi5FbnRlcnByaXNlLlJlRW5j",
            "cnlwdGVkUm9sZUtleRI1Cgh0ZWFtS2V5cxgGIAMoCzIjLkVudGVycHJpc2Uu",
            "RW5jcnlwdGVkVGVhbUtleVJlcXVlc3QiLAoIUm9sZVRlYW0SDwoHcm9sZV9p",
            "ZBgBIAEoAxIPCgd0ZWFtVWlkGAIgASgMIjQKCVJvbGVUZWFtcxInCglyb2xl",
            "X3RlYW0YASADKAsyFC5FbnRlcnByaXNlLlJvbGVUZWFtIsEDChZFbnRlcnBy",
            "aXNlUmVnaXN0cmF0aW9uEhgKEGVuY3J5cHRlZFRyZWVLZXkYASABKAwSFgoO",
            "ZW50ZXJwcmlzZU5hbWUYAiABKAkSFAoMcm9vdE5vZGVEYXRhGAMgASgMEhUK",
            "DWFkbWluVXNlckRhdGEYBCABKAwSEQoJYWRtaW5OYW1lGAUgASgJEhAKCHJv",
            "bGVEYXRhGAYgASgMEjgKCnJzYUtleVBhaXIYByABKAsyJC5FbnRlcnByaXNl",
            "LkVudGVycHJpc2VLZXlQYWlyUmVxdWVzdBITCgtudW1iZXJTZWF0cxgIIAEo",
            "BRIyCg5lbnRlcnByaXNlVHlwZRgJIAEoDjIaLkVudGVycHJpc2UuRW50ZXJw",
            "cmlzZVR5cGUSFQoNcm9sZVB1YmxpY0tleRgKIAEoDBIqCiJyb2xlUHJpdmF0",
            "ZUtleUVuY3J5cHRlZFdpdGhSb2xlS2V5GAsgASgMEiMKG3JvbGVLZXlFbmNy",
            "eXB0ZWRXaXRoVHJlZUtleRgMIAEoDBI4CgplY2NLZXlQYWlyGA0gASgLMiQu",
            "RW50ZXJwcmlzZS5FbnRlcnByaXNlS2V5UGFpclJlcXVlc3QiLgoaRG9tYWlu",
            "UGFzc3dvcmRSdWxlc1JlcXVlc3QSEAoIdXNlcm5hbWUYASABKAkiXAoZRG9t",
            "YWluUGFzc3dvcmRSdWxlc0ZpZWxkcxIMCgR0eXBlGAEgASgJEg8KB21pbmlt",
            "dW0YAiABKAUSDwoHbWF4aW11bRgDIAEoBRIPCgdhbGxvd2VkGAQgASgIImcK",
            "G0RvbWFpblBhc3N3b3JkUnVsZXNSZXNwb25zZRJIChlkb21haW5QYXNzd29y",
            "ZFJ1bGVzRmllbGRzGAEgAygLMiUuRW50ZXJwcmlzZS5Eb21haW5QYXNzd29y",
            "ZFJ1bGVzRmllbGRzIogBChhBcHByb3ZlVXNlckRldmljZVJlcXVlc3QSGAoQ",
            "ZW50ZXJwcmlzZVVzZXJJZBgBIAEoAxIcChRlbmNyeXB0ZWREZXZpY2VUb2tl",
            "bhgCIAEoDBIeChZlbmNyeXB0ZWREZXZpY2VEYXRhS2V5GAMgASgMEhQKDGRl",
            "bnlBcHByb3ZhbBgEIAEoCCJ0ChlBcHByb3ZlVXNlckRldmljZVJlc3BvbnNl",
            "EhgKEGVudGVycHJpc2VVc2VySWQYASABKAMSHAoUZW5jcnlwdGVkRGV2aWNl",
            "VG9rZW4YAiABKAwSDgoGZmFpbGVkGAMgASgIEg8KB21lc3NhZ2UYBCABKAki",
            "WQoZQXBwcm92ZVVzZXJEZXZpY2VzUmVxdWVzdBI8Cg5kZXZpY2VSZXF1ZXN0",
            "cxgBIAMoCzIkLkVudGVycHJpc2UuQXBwcm92ZVVzZXJEZXZpY2VSZXF1ZXN0",
            "IlwKGkFwcHJvdmVVc2VyRGV2aWNlc1Jlc3BvbnNlEj4KD2RldmljZVJlc3Bv",
            "bnNlcxgBIAMoCzIlLkVudGVycHJpc2UuQXBwcm92ZVVzZXJEZXZpY2VSZXNw",
            "b25zZSJiChVFbnRlcnByaXNlVXNlckRhdGFLZXkSGAoQZW50ZXJwcmlzZVVz",
            "ZXJJZBgBIAEoAxIcChR1c2VyRW5jcnlwdGVkRGF0YUtleRgCIAEoDBIRCglr",
            "ZXlUeXBlSWQYAyABKAUiSQoWRW50ZXJwcmlzZVVzZXJEYXRhS2V5cxIvCgRr",
            "ZXlzGAEgAygLMiEuRW50ZXJwcmlzZS5FbnRlcnByaXNlVXNlckRhdGFLZXkq",
            "GwoHS2V5VHlwZRIHCgNSU0EQABIHCgNFQ0MQASo9Cg5FbnRlcnByaXNlVHlw",
            "ZRIXChNFTlRFUlBSSVNFX1NUQU5EQVJEEAASEgoORU5URVJQUklTRV9NU1AQ",
            "AUImChhjb20ua2VlcGVyc2VjdXJpdHkucHJvdG9CCkVudGVycHJpc2ViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Enterprise.KeyType), typeof(global::Enterprise.EnterpriseType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseKeyPairRequest), global::Enterprise.EnterpriseKeyPairRequest.Parser, new[]{ "EnterprisePublicKey", "EncryptedEnterprisePrivateKey", "KeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetTeamMemberRequest), global::Enterprise.GetTeamMemberRequest.Parser, new[]{ "TeamUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUser), global::Enterprise.EnterpriseUser.Parser, new[]{ "EnterpriseUserId", "Email", "EnterpriseUsername" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetTeamMemberResponse), global::Enterprise.GetTeamMemberResponse.Parser, new[]{ "EnterpriseUser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUserIds), global::Enterprise.EnterpriseUserIds.Parser, new[]{ "EnterpriseUserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterprisePersonalAccount), global::Enterprise.EnterprisePersonalAccount.Parser, new[]{ "Email", "OBSOLETEFIELD" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EncryptedTeamKeyRequest), global::Enterprise.EncryptedTeamKeyRequest.Parser, new[]{ "TeamUid", "EncryptedTeamKey", "Force" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ReEncryptedData), global::Enterprise.ReEncryptedData.Parser, new[]{ "Id", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ReEncryptedRoleKey), global::Enterprise.ReEncryptedRoleKey.Parser, new[]{ "RoleId", "EncryptedRoleKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.NodeToManagedCompanyRequest), global::Enterprise.NodeToManagedCompanyRequest.Parser, new[]{ "CompanyId", "Nodes", "Roles", "Users", "RoleKeys", "TeamKeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleTeam), global::Enterprise.RoleTeam.Parser, new[]{ "RoleId", "TeamUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleTeams), global::Enterprise.RoleTeams.Parser, new[]{ "RoleTeam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseRegistration), global::Enterprise.EnterpriseRegistration.Parser, new[]{ "EncryptedTreeKey", "EnterpriseName", "RootNodeData", "AdminUserData", "AdminName", "RoleData", "RsaKeyPair", "NumberSeats", "EnterpriseType", "RolePublicKey", "RolePrivateKeyEncryptedWithRoleKey", "RoleKeyEncryptedWithTreeKey", "EccKeyPair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DomainPasswordRulesRequest), global::Enterprise.DomainPasswordRulesRequest.Parser, new[]{ "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DomainPasswordRulesFields), global::Enterprise.DomainPasswordRulesFields.Parser, new[]{ "Type", "Minimum", "Maximum", "Allowed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DomainPasswordRulesResponse), global::Enterprise.DomainPasswordRulesResponse.Parser, new[]{ "DomainPasswordRulesFields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDeviceRequest), global::Enterprise.ApproveUserDeviceRequest.Parser, new[]{ "EnterpriseUserId", "EncryptedDeviceToken", "EncryptedDeviceDataKey", "DenyApproval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDeviceResponse), global::Enterprise.ApproveUserDeviceResponse.Parser, new[]{ "EnterpriseUserId", "EncryptedDeviceToken", "Failed", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDevicesRequest), global::Enterprise.ApproveUserDevicesRequest.Parser, new[]{ "DeviceRequests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDevicesResponse), global::Enterprise.ApproveUserDevicesResponse.Parser, new[]{ "DeviceResponses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUserDataKey), global::Enterprise.EnterpriseUserDataKey.Parser, new[]{ "EnterpriseUserId", "UserEncryptedDataKey", "KeyTypeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUserDataKeys), global::Enterprise.EnterpriseUserDataKeys.Parser, new[]{ "Keys" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum KeyType {
    [pbr::OriginalName("RSA")] Rsa = 0,
    [pbr::OriginalName("ECC")] Ecc = 1,
  }

  public enum EnterpriseType {
    [pbr::OriginalName("ENTERPRISE_STANDARD")] EnterpriseStandard = 0,
    [pbr::OriginalName("ENTERPRISE_MSP")] EnterpriseMsp = 1,
  }

  #endregion

  #region Messages
  public sealed partial class EnterpriseKeyPairRequest : pb::IMessage<EnterpriseKeyPairRequest> {
    private static readonly pb::MessageParser<EnterpriseKeyPairRequest> _parser = new pb::MessageParser<EnterpriseKeyPairRequest>(() => new EnterpriseKeyPairRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseKeyPairRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeyPairRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeyPairRequest(EnterpriseKeyPairRequest other) : this() {
      enterprisePublicKey_ = other.enterprisePublicKey_;
      encryptedEnterprisePrivateKey_ = other.encryptedEnterprisePrivateKey_;
      keyType_ = other.keyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeyPairRequest Clone() {
      return new EnterpriseKeyPairRequest(this);
    }

    /// <summary>Field number for the "enterprisePublicKey" field.</summary>
    public const int EnterprisePublicKeyFieldNumber = 1;
    private pb::ByteString enterprisePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterprisePublicKey {
      get { return enterprisePublicKey_; }
      set {
        enterprisePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedEnterprisePrivateKey" field.</summary>
    public const int EncryptedEnterprisePrivateKeyFieldNumber = 2;
    private pb::ByteString encryptedEnterprisePrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedEnterprisePrivateKey {
      get { return encryptedEnterprisePrivateKey_; }
      set {
        encryptedEnterprisePrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 3;
    private global::Enterprise.KeyType keyType_ = global::Enterprise.KeyType.Rsa;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.KeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseKeyPairRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseKeyPairRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterprisePublicKey != other.EnterprisePublicKey) return false;
      if (EncryptedEnterprisePrivateKey != other.EncryptedEnterprisePrivateKey) return false;
      if (KeyType != other.KeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterprisePublicKey.Length != 0) hash ^= EnterprisePublicKey.GetHashCode();
      if (EncryptedEnterprisePrivateKey.Length != 0) hash ^= EncryptedEnterprisePrivateKey.GetHashCode();
      if (KeyType != global::Enterprise.KeyType.Rsa) hash ^= KeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterprisePublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnterprisePublicKey);
      }
      if (EncryptedEnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedEnterprisePrivateKey);
      }
      if (KeyType != global::Enterprise.KeyType.Rsa) {
        output.WriteRawTag(24);
        output.WriteEnum((int) KeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterprisePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterprisePublicKey);
      }
      if (EncryptedEnterprisePrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedEnterprisePrivateKey);
      }
      if (KeyType != global::Enterprise.KeyType.Rsa) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseKeyPairRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterprisePublicKey.Length != 0) {
        EnterprisePublicKey = other.EnterprisePublicKey;
      }
      if (other.EncryptedEnterprisePrivateKey.Length != 0) {
        EncryptedEnterprisePrivateKey = other.EncryptedEnterprisePrivateKey;
      }
      if (other.KeyType != global::Enterprise.KeyType.Rsa) {
        KeyType = other.KeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnterprisePublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedEnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 24: {
            KeyType = (global::Enterprise.KeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTeamMemberRequest : pb::IMessage<GetTeamMemberRequest> {
    private static readonly pb::MessageParser<GetTeamMemberRequest> _parser = new pb::MessageParser<GetTeamMemberRequest>(() => new GetTeamMemberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTeamMemberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberRequest(GetTeamMemberRequest other) : this() {
      teamUid_ = other.teamUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberRequest Clone() {
      return new GetTeamMemberRequest(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTeamMemberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTeamMemberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTeamMemberRequest other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUser : pb::IMessage<EnterpriseUser> {
    private static readonly pb::MessageParser<EnterpriseUser> _parser = new pb::MessageParser<EnterpriseUser>(() => new EnterpriseUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUser(EnterpriseUser other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      email_ = other.email_;
      enterpriseUsername_ = other.enterpriseUsername_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUser Clone() {
      return new EnterpriseUser(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseUsername" field.</summary>
    public const int EnterpriseUsernameFieldNumber = 3;
    private string enterpriseUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterpriseUsername {
      get { return enterpriseUsername_; }
      set {
        enterpriseUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (Email != other.Email) return false;
      if (EnterpriseUsername != other.EnterpriseUsername) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (EnterpriseUsername.Length != 0) hash ^= EnterpriseUsername.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (EnterpriseUsername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EnterpriseUsername);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (EnterpriseUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterpriseUsername);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUser other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.EnterpriseUsername.Length != 0) {
        EnterpriseUsername = other.EnterpriseUsername;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            EnterpriseUsername = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTeamMemberResponse : pb::IMessage<GetTeamMemberResponse> {
    private static readonly pb::MessageParser<GetTeamMemberResponse> _parser = new pb::MessageParser<GetTeamMemberResponse>(() => new GetTeamMemberResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTeamMemberResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberResponse(GetTeamMemberResponse other) : this() {
      enterpriseUser_ = other.enterpriseUser_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberResponse Clone() {
      return new GetTeamMemberResponse(this);
    }

    /// <summary>Field number for the "enterpriseUser" field.</summary>
    public const int EnterpriseUserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.EnterpriseUser> _repeated_enterpriseUser_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.EnterpriseUser.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EnterpriseUser> enterpriseUser_ = new pbc::RepeatedField<global::Enterprise.EnterpriseUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EnterpriseUser> EnterpriseUser {
      get { return enterpriseUser_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTeamMemberResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTeamMemberResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!enterpriseUser_.Equals(other.enterpriseUser_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= enterpriseUser_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      enterpriseUser_.WriteTo(output, _repeated_enterpriseUser_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += enterpriseUser_.CalculateSize(_repeated_enterpriseUser_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTeamMemberResponse other) {
      if (other == null) {
        return;
      }
      enterpriseUser_.Add(other.enterpriseUser_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            enterpriseUser_.AddEntriesFrom(input, _repeated_enterpriseUser_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserIds : pb::IMessage<EnterpriseUserIds> {
    private static readonly pb::MessageParser<EnterpriseUserIds> _parser = new pb::MessageParser<EnterpriseUserIds>(() => new EnterpriseUserIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIds(EnterpriseUserIds other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIds Clone() {
      return new EnterpriseUserIds(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> enterpriseUserId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserId {
      get { return enterpriseUserId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!enterpriseUserId_.Equals(other.enterpriseUserId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= enterpriseUserId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      enterpriseUserId_.WriteTo(output, _repeated_enterpriseUserId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += enterpriseUserId_.CalculateSize(_repeated_enterpriseUserId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserIds other) {
      if (other == null) {
        return;
      }
      enterpriseUserId_.Add(other.enterpriseUserId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            enterpriseUserId_.AddEntriesFrom(input, _repeated_enterpriseUserId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterprisePersonalAccount : pb::IMessage<EnterprisePersonalAccount> {
    private static readonly pb::MessageParser<EnterprisePersonalAccount> _parser = new pb::MessageParser<EnterprisePersonalAccount>(() => new EnterprisePersonalAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterprisePersonalAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePersonalAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePersonalAccount(EnterprisePersonalAccount other) : this() {
      email_ = other.email_;
      oBSOLETEFIELD_ = other.oBSOLETEFIELD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePersonalAccount Clone() {
      return new EnterprisePersonalAccount(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OBSOLETE_FIELD" field.</summary>
    public const int OBSOLETEFIELDFieldNumber = 2;
    private pb::ByteString oBSOLETEFIELD_ = pb::ByteString.Empty;
    /// <summary>
    ///DO NOT RE-USE. placeholder for backwards compatability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OBSOLETEFIELD {
      get { return oBSOLETEFIELD_; }
      set {
        oBSOLETEFIELD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterprisePersonalAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterprisePersonalAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (OBSOLETEFIELD != other.OBSOLETEFIELD) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (OBSOLETEFIELD.Length != 0) hash ^= OBSOLETEFIELD.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (OBSOLETEFIELD.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OBSOLETEFIELD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (OBSOLETEFIELD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OBSOLETEFIELD);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterprisePersonalAccount other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.OBSOLETEFIELD.Length != 0) {
        OBSOLETEFIELD = other.OBSOLETEFIELD;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            OBSOLETEFIELD = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EncryptedTeamKeyRequest : pb::IMessage<EncryptedTeamKeyRequest> {
    private static readonly pb::MessageParser<EncryptedTeamKeyRequest> _parser = new pb::MessageParser<EncryptedTeamKeyRequest>(() => new EncryptedTeamKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncryptedTeamKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedTeamKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedTeamKeyRequest(EncryptedTeamKeyRequest other) : this() {
      teamUid_ = other.teamUid_;
      encryptedTeamKey_ = other.encryptedTeamKey_;
      force_ = other.force_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedTeamKeyRequest Clone() {
      return new EncryptedTeamKeyRequest(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKey" field.</summary>
    public const int EncryptedTeamKeyFieldNumber = 2;
    private pb::ByteString encryptedTeamKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTeamKey {
      get { return encryptedTeamKey_; }
      set {
        encryptedTeamKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 3;
    private bool force_;
    /// <summary>
    /// if false, existing team key must be null to succeed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncryptedTeamKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncryptedTeamKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (EncryptedTeamKey != other.EncryptedTeamKey) return false;
      if (Force != other.Force) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (EncryptedTeamKey.Length != 0) hash ^= EncryptedTeamKey.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (EncryptedTeamKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedTeamKey);
      }
      if (Force != false) {
        output.WriteRawTag(24);
        output.WriteBool(Force);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (EncryptedTeamKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamKey);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncryptedTeamKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.EncryptedTeamKey.Length != 0) {
        EncryptedTeamKey = other.EncryptedTeamKey;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedTeamKey = input.ReadBytes();
            break;
          }
          case 24: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReEncryptedData : pb::IMessage<ReEncryptedData> {
    private static readonly pb::MessageParser<ReEncryptedData> _parser = new pb::MessageParser<ReEncryptedData>(() => new ReEncryptedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReEncryptedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedData(ReEncryptedData other) : this() {
      id_ = other.id_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedData Clone() {
      return new ReEncryptedData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReEncryptedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReEncryptedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReEncryptedData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReEncryptedRoleKey : pb::IMessage<ReEncryptedRoleKey> {
    private static readonly pb::MessageParser<ReEncryptedRoleKey> _parser = new pb::MessageParser<ReEncryptedRoleKey>(() => new ReEncryptedRoleKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReEncryptedRoleKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedRoleKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedRoleKey(ReEncryptedRoleKey other) : this() {
      roleId_ = other.roleId_;
      encryptedRoleKey_ = other.encryptedRoleKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedRoleKey Clone() {
      return new ReEncryptedRoleKey(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedRoleKey" field.</summary>
    public const int EncryptedRoleKeyFieldNumber = 2;
    private pb::ByteString encryptedRoleKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedRoleKey {
      get { return encryptedRoleKey_; }
      set {
        encryptedRoleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReEncryptedRoleKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReEncryptedRoleKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EncryptedRoleKey != other.EncryptedRoleKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (EncryptedRoleKey.Length != 0) hash ^= EncryptedRoleKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (EncryptedRoleKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedRoleKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (EncryptedRoleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRoleKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReEncryptedRoleKey other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.EncryptedRoleKey.Length != 0) {
        EncryptedRoleKey = other.EncryptedRoleKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedRoleKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeToManagedCompanyRequest : pb::IMessage<NodeToManagedCompanyRequest> {
    private static readonly pb::MessageParser<NodeToManagedCompanyRequest> _parser = new pb::MessageParser<NodeToManagedCompanyRequest>(() => new NodeToManagedCompanyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeToManagedCompanyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeToManagedCompanyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeToManagedCompanyRequest(NodeToManagedCompanyRequest other) : this() {
      companyId_ = other.companyId_;
      nodes_ = other.nodes_.Clone();
      roles_ = other.roles_.Clone();
      users_ = other.users_.Clone();
      roleKeys_ = other.roleKeys_.Clone();
      teamKeys_ = other.teamKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeToManagedCompanyRequest Clone() {
      return new NodeToManagedCompanyRequest(this);
    }

    /// <summary>Field number for the "companyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private int companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedData> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.ReEncryptedData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedData> nodes_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedData> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedData> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(26, global::Enterprise.ReEncryptedData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedData> roles_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedData> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedData> _repeated_users_codec
        = pb::FieldCodec.ForMessage(34, global::Enterprise.ReEncryptedData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedData> users_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedData> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "roleKeys" field.</summary>
    public const int RoleKeysFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedRoleKey> _repeated_roleKeys_codec
        = pb::FieldCodec.ForMessage(42, global::Enterprise.ReEncryptedRoleKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey> roleKeys_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey> RoleKeys {
      get { return roleKeys_; }
    }

    /// <summary>Field number for the "teamKeys" field.</summary>
    public const int TeamKeysFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Enterprise.EncryptedTeamKeyRequest> _repeated_teamKeys_codec
        = pb::FieldCodec.ForMessage(50, global::Enterprise.EncryptedTeamKeyRequest.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EncryptedTeamKeyRequest> teamKeys_ = new pbc::RepeatedField<global::Enterprise.EncryptedTeamKeyRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EncryptedTeamKeyRequest> TeamKeys {
      get { return teamKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeToManagedCompanyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeToManagedCompanyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      if(!users_.Equals(other.users_)) return false;
      if(!roleKeys_.Equals(other.roleKeys_)) return false;
      if(!teamKeys_.Equals(other.teamKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= roles_.GetHashCode();
      hash ^= users_.GetHashCode();
      hash ^= roleKeys_.GetHashCode();
      hash ^= teamKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      roles_.WriteTo(output, _repeated_roles_codec);
      users_.WriteTo(output, _repeated_users_codec);
      roleKeys_.WriteTo(output, _repeated_roleKeys_codec);
      teamKeys_.WriteTo(output, _repeated_teamKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += roles_.CalculateSize(_repeated_roles_codec);
      size += users_.CalculateSize(_repeated_users_codec);
      size += roleKeys_.CalculateSize(_repeated_roleKeys_codec);
      size += teamKeys_.CalculateSize(_repeated_teamKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeToManagedCompanyRequest other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      nodes_.Add(other.nodes_);
      roles_.Add(other.roles_);
      users_.Add(other.users_);
      roleKeys_.Add(other.roleKeys_);
      teamKeys_.Add(other.teamKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 26: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 34: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 42: {
            roleKeys_.AddEntriesFrom(input, _repeated_roleKeys_codec);
            break;
          }
          case 50: {
            teamKeys_.AddEntriesFrom(input, _repeated_teamKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleTeam : pb::IMessage<RoleTeam> {
    private static readonly pb::MessageParser<RoleTeam> _parser = new pb::MessageParser<RoleTeam>(() => new RoleTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeam(RoleTeam other) : this() {
      roleId_ = other.roleId_;
      teamUid_ = other.teamUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeam Clone() {
      return new RoleTeam(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 2;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (TeamUid != other.TeamUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (TeamUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TeamUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleTeam other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            TeamUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleTeams : pb::IMessage<RoleTeams> {
    private static readonly pb::MessageParser<RoleTeams> _parser = new pb::MessageParser<RoleTeams>(() => new RoleTeams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTeams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeams(RoleTeams other) : this() {
      roleTeam_ = other.roleTeam_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeams Clone() {
      return new RoleTeams(this);
    }

    /// <summary>Field number for the "role_team" field.</summary>
    public const int RoleTeamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.RoleTeam> _repeated_roleTeam_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.RoleTeam.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.RoleTeam> roleTeam_ = new pbc::RepeatedField<global::Enterprise.RoleTeam>();
    /// <summary>
    /// 100 max
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.RoleTeam> RoleTeam {
      get { return roleTeam_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleTeams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleTeams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roleTeam_.Equals(other.roleTeam_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roleTeam_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleTeam_.WriteTo(output, _repeated_roleTeam_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleTeam_.CalculateSize(_repeated_roleTeam_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleTeams other) {
      if (other == null) {
        return;
      }
      roleTeam_.Add(other.roleTeam_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roleTeam_.AddEntriesFrom(input, _repeated_roleTeam_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseRegistration : pb::IMessage<EnterpriseRegistration> {
    private static readonly pb::MessageParser<EnterpriseRegistration> _parser = new pb::MessageParser<EnterpriseRegistration>(() => new EnterpriseRegistration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseRegistration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseRegistration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseRegistration(EnterpriseRegistration other) : this() {
      encryptedTreeKey_ = other.encryptedTreeKey_;
      enterpriseName_ = other.enterpriseName_;
      rootNodeData_ = other.rootNodeData_;
      adminUserData_ = other.adminUserData_;
      adminName_ = other.adminName_;
      roleData_ = other.roleData_;
      rsaKeyPair_ = other.rsaKeyPair_ != null ? other.rsaKeyPair_.Clone() : null;
      numberSeats_ = other.numberSeats_;
      enterpriseType_ = other.enterpriseType_;
      rolePublicKey_ = other.rolePublicKey_;
      rolePrivateKeyEncryptedWithRoleKey_ = other.rolePrivateKeyEncryptedWithRoleKey_;
      roleKeyEncryptedWithTreeKey_ = other.roleKeyEncryptedWithTreeKey_;
      eccKeyPair_ = other.eccKeyPair_ != null ? other.eccKeyPair_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseRegistration Clone() {
      return new EnterpriseRegistration(this);
    }

    /// <summary>Field number for the "encryptedTreeKey" field.</summary>
    public const int EncryptedTreeKeyFieldNumber = 1;
    private pb::ByteString encryptedTreeKey_ = pb::ByteString.Empty;
    /// <summary>
    /// AES 256 key encrypted with admin's data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTreeKey {
      get { return encryptedTreeKey_; }
      set {
        encryptedTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseName" field.</summary>
    public const int EnterpriseNameFieldNumber = 2;
    private string enterpriseName_ = "";
    /// <summary>
    /// plain text name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterpriseName {
      get { return enterpriseName_; }
      set {
        enterpriseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rootNodeData" field.</summary>
    public const int RootNodeDataFieldNumber = 3;
    private pb::ByteString rootNodeData_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted node data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RootNodeData {
      get { return rootNodeData_; }
      set {
        rootNodeData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adminUserData" field.</summary>
    public const int AdminUserDataFieldNumber = 4;
    private pb::ByteString adminUserData_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted user data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdminUserData {
      get { return adminUserData_; }
      set {
        adminUserData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adminName" field.</summary>
    public const int AdminNameFieldNumber = 5;
    private string adminName_ = "";
    /// <summary>
    /// full name of admin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminName {
      get { return adminName_; }
      set {
        adminName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleData" field.</summary>
    public const int RoleDataFieldNumber = 6;
    private pb::ByteString roleData_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted role data for admin role
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleData {
      get { return roleData_; }
      set {
        roleData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rsaKeyPair" field.</summary>
    public const int RsaKeyPairFieldNumber = 7;
    private global::Enterprise.EnterpriseKeyPairRequest rsaKeyPair_;
    /// <summary>
    /// for sharing to the enterprise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseKeyPairRequest RsaKeyPair {
      get { return rsaKeyPair_; }
      set {
        rsaKeyPair_ = value;
      }
    }

    /// <summary>Field number for the "numberSeats" field.</summary>
    public const int NumberSeatsFieldNumber = 8;
    private int numberSeats_;
    /// <summary>
    /// should this be part of the request?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberSeats {
      get { return numberSeats_; }
      set {
        numberSeats_ = value;
      }
    }

    /// <summary>Field number for the "enterpriseType" field.</summary>
    public const int EnterpriseTypeFieldNumber = 9;
    private global::Enterprise.EnterpriseType enterpriseType_ = global::Enterprise.EnterpriseType.EnterpriseStandard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseType EnterpriseType {
      get { return enterpriseType_; }
      set {
        enterpriseType_ = value;
      }
    }

    /// <summary>Field number for the "rolePublicKey" field.</summary>
    public const int RolePublicKeyFieldNumber = 10;
    private pb::ByteString rolePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RolePublicKey {
      get { return rolePublicKey_; }
      set {
        rolePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rolePrivateKeyEncryptedWithRoleKey" field.</summary>
    public const int RolePrivateKeyEncryptedWithRoleKeyFieldNumber = 11;
    private pb::ByteString rolePrivateKeyEncryptedWithRoleKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RolePrivateKeyEncryptedWithRoleKey {
      get { return rolePrivateKeyEncryptedWithRoleKey_; }
      set {
        rolePrivateKeyEncryptedWithRoleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleKeyEncryptedWithTreeKey" field.</summary>
    public const int RoleKeyEncryptedWithTreeKeyFieldNumber = 12;
    private pb::ByteString roleKeyEncryptedWithTreeKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleKeyEncryptedWithTreeKey {
      get { return roleKeyEncryptedWithTreeKey_; }
      set {
        roleKeyEncryptedWithTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccKeyPair" field.</summary>
    public const int EccKeyPairFieldNumber = 13;
    private global::Enterprise.EnterpriseKeyPairRequest eccKeyPair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseKeyPairRequest EccKeyPair {
      get { return eccKeyPair_; }
      set {
        eccKeyPair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseRegistration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseRegistration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedTreeKey != other.EncryptedTreeKey) return false;
      if (EnterpriseName != other.EnterpriseName) return false;
      if (RootNodeData != other.RootNodeData) return false;
      if (AdminUserData != other.AdminUserData) return false;
      if (AdminName != other.AdminName) return false;
      if (RoleData != other.RoleData) return false;
      if (!object.Equals(RsaKeyPair, other.RsaKeyPair)) return false;
      if (NumberSeats != other.NumberSeats) return false;
      if (EnterpriseType != other.EnterpriseType) return false;
      if (RolePublicKey != other.RolePublicKey) return false;
      if (RolePrivateKeyEncryptedWithRoleKey != other.RolePrivateKeyEncryptedWithRoleKey) return false;
      if (RoleKeyEncryptedWithTreeKey != other.RoleKeyEncryptedWithTreeKey) return false;
      if (!object.Equals(EccKeyPair, other.EccKeyPair)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedTreeKey.Length != 0) hash ^= EncryptedTreeKey.GetHashCode();
      if (EnterpriseName.Length != 0) hash ^= EnterpriseName.GetHashCode();
      if (RootNodeData.Length != 0) hash ^= RootNodeData.GetHashCode();
      if (AdminUserData.Length != 0) hash ^= AdminUserData.GetHashCode();
      if (AdminName.Length != 0) hash ^= AdminName.GetHashCode();
      if (RoleData.Length != 0) hash ^= RoleData.GetHashCode();
      if (rsaKeyPair_ != null) hash ^= RsaKeyPair.GetHashCode();
      if (NumberSeats != 0) hash ^= NumberSeats.GetHashCode();
      if (EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) hash ^= EnterpriseType.GetHashCode();
      if (RolePublicKey.Length != 0) hash ^= RolePublicKey.GetHashCode();
      if (RolePrivateKeyEncryptedWithRoleKey.Length != 0) hash ^= RolePrivateKeyEncryptedWithRoleKey.GetHashCode();
      if (RoleKeyEncryptedWithTreeKey.Length != 0) hash ^= RoleKeyEncryptedWithTreeKey.GetHashCode();
      if (eccKeyPair_ != null) hash ^= EccKeyPair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedTreeKey);
      }
      if (EnterpriseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EnterpriseName);
      }
      if (RootNodeData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RootNodeData);
      }
      if (AdminUserData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(AdminUserData);
      }
      if (AdminName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdminName);
      }
      if (RoleData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(RoleData);
      }
      if (rsaKeyPair_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RsaKeyPair);
      }
      if (NumberSeats != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumberSeats);
      }
      if (EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) {
        output.WriteRawTag(72);
        output.WriteEnum((int) EnterpriseType);
      }
      if (RolePublicKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(RolePublicKey);
      }
      if (RolePrivateKeyEncryptedWithRoleKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(RolePrivateKeyEncryptedWithRoleKey);
      }
      if (RoleKeyEncryptedWithTreeKey.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(RoleKeyEncryptedWithTreeKey);
      }
      if (eccKeyPair_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EccKeyPair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTreeKey);
      }
      if (EnterpriseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterpriseName);
      }
      if (RootNodeData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RootNodeData);
      }
      if (AdminUserData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdminUserData);
      }
      if (AdminName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminName);
      }
      if (RoleData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleData);
      }
      if (rsaKeyPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RsaKeyPair);
      }
      if (NumberSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberSeats);
      }
      if (EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnterpriseType);
      }
      if (RolePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RolePublicKey);
      }
      if (RolePrivateKeyEncryptedWithRoleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RolePrivateKeyEncryptedWithRoleKey);
      }
      if (RoleKeyEncryptedWithTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleKeyEncryptedWithTreeKey);
      }
      if (eccKeyPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EccKeyPair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseRegistration other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedTreeKey.Length != 0) {
        EncryptedTreeKey = other.EncryptedTreeKey;
      }
      if (other.EnterpriseName.Length != 0) {
        EnterpriseName = other.EnterpriseName;
      }
      if (other.RootNodeData.Length != 0) {
        RootNodeData = other.RootNodeData;
      }
      if (other.AdminUserData.Length != 0) {
        AdminUserData = other.AdminUserData;
      }
      if (other.AdminName.Length != 0) {
        AdminName = other.AdminName;
      }
      if (other.RoleData.Length != 0) {
        RoleData = other.RoleData;
      }
      if (other.rsaKeyPair_ != null) {
        if (rsaKeyPair_ == null) {
          RsaKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
        }
        RsaKeyPair.MergeFrom(other.RsaKeyPair);
      }
      if (other.NumberSeats != 0) {
        NumberSeats = other.NumberSeats;
      }
      if (other.EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) {
        EnterpriseType = other.EnterpriseType;
      }
      if (other.RolePublicKey.Length != 0) {
        RolePublicKey = other.RolePublicKey;
      }
      if (other.RolePrivateKeyEncryptedWithRoleKey.Length != 0) {
        RolePrivateKeyEncryptedWithRoleKey = other.RolePrivateKeyEncryptedWithRoleKey;
      }
      if (other.RoleKeyEncryptedWithTreeKey.Length != 0) {
        RoleKeyEncryptedWithTreeKey = other.RoleKeyEncryptedWithTreeKey;
      }
      if (other.eccKeyPair_ != null) {
        if (eccKeyPair_ == null) {
          EccKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
        }
        EccKeyPair.MergeFrom(other.EccKeyPair);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedTreeKey = input.ReadBytes();
            break;
          }
          case 18: {
            EnterpriseName = input.ReadString();
            break;
          }
          case 26: {
            RootNodeData = input.ReadBytes();
            break;
          }
          case 34: {
            AdminUserData = input.ReadBytes();
            break;
          }
          case 42: {
            AdminName = input.ReadString();
            break;
          }
          case 50: {
            RoleData = input.ReadBytes();
            break;
          }
          case 58: {
            if (rsaKeyPair_ == null) {
              RsaKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
            }
            input.ReadMessage(RsaKeyPair);
            break;
          }
          case 64: {
            NumberSeats = input.ReadInt32();
            break;
          }
          case 72: {
            EnterpriseType = (global::Enterprise.EnterpriseType) input.ReadEnum();
            break;
          }
          case 82: {
            RolePublicKey = input.ReadBytes();
            break;
          }
          case 90: {
            RolePrivateKeyEncryptedWithRoleKey = input.ReadBytes();
            break;
          }
          case 98: {
            RoleKeyEncryptedWithTreeKey = input.ReadBytes();
            break;
          }
          case 106: {
            if (eccKeyPair_ == null) {
              EccKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
            }
            input.ReadMessage(EccKeyPair);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DomainPasswordRulesRequest : pb::IMessage<DomainPasswordRulesRequest> {
    private static readonly pb::MessageParser<DomainPasswordRulesRequest> _parser = new pb::MessageParser<DomainPasswordRulesRequest>(() => new DomainPasswordRulesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainPasswordRulesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesRequest(DomainPasswordRulesRequest other) : this() {
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesRequest Clone() {
      return new DomainPasswordRulesRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainPasswordRulesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainPasswordRulesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainPasswordRulesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DomainPasswordRulesFields : pb::IMessage<DomainPasswordRulesFields> {
    private static readonly pb::MessageParser<DomainPasswordRulesFields> _parser = new pb::MessageParser<DomainPasswordRulesFields>(() => new DomainPasswordRulesFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainPasswordRulesFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesFields(DomainPasswordRulesFields other) : this() {
      type_ = other.type_;
      minimum_ = other.minimum_;
      maximum_ = other.maximum_;
      allowed_ = other.allowed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesFields Clone() {
      return new DomainPasswordRulesFields(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimum" field.</summary>
    public const int MinimumFieldNumber = 2;
    private int minimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minimum {
      get { return minimum_; }
      set {
        minimum_ = value;
      }
    }

    /// <summary>Field number for the "maximum" field.</summary>
    public const int MaximumFieldNumber = 3;
    private int maximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maximum {
      get { return maximum_; }
      set {
        maximum_ = value;
      }
    }

    /// <summary>Field number for the "allowed" field.</summary>
    public const int AllowedFieldNumber = 4;
    private bool allowed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Allowed {
      get { return allowed_; }
      set {
        allowed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainPasswordRulesFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainPasswordRulesFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Minimum != other.Minimum) return false;
      if (Maximum != other.Maximum) return false;
      if (Allowed != other.Allowed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Minimum != 0) hash ^= Minimum.GetHashCode();
      if (Maximum != 0) hash ^= Maximum.GetHashCode();
      if (Allowed != false) hash ^= Allowed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Minimum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minimum);
      }
      if (Maximum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Maximum);
      }
      if (Allowed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Allowed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Minimum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minimum);
      }
      if (Maximum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maximum);
      }
      if (Allowed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainPasswordRulesFields other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Minimum != 0) {
        Minimum = other.Minimum;
      }
      if (other.Maximum != 0) {
        Maximum = other.Maximum;
      }
      if (other.Allowed != false) {
        Allowed = other.Allowed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Minimum = input.ReadInt32();
            break;
          }
          case 24: {
            Maximum = input.ReadInt32();
            break;
          }
          case 32: {
            Allowed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DomainPasswordRulesResponse : pb::IMessage<DomainPasswordRulesResponse> {
    private static readonly pb::MessageParser<DomainPasswordRulesResponse> _parser = new pb::MessageParser<DomainPasswordRulesResponse>(() => new DomainPasswordRulesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainPasswordRulesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesResponse(DomainPasswordRulesResponse other) : this() {
      domainPasswordRulesFields_ = other.domainPasswordRulesFields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesResponse Clone() {
      return new DomainPasswordRulesResponse(this);
    }

    /// <summary>Field number for the "domainPasswordRulesFields" field.</summary>
    public const int DomainPasswordRulesFieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.DomainPasswordRulesFields> _repeated_domainPasswordRulesFields_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.DomainPasswordRulesFields.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.DomainPasswordRulesFields> domainPasswordRulesFields_ = new pbc::RepeatedField<global::Enterprise.DomainPasswordRulesFields>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.DomainPasswordRulesFields> DomainPasswordRulesFields {
      get { return domainPasswordRulesFields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainPasswordRulesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainPasswordRulesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!domainPasswordRulesFields_.Equals(other.domainPasswordRulesFields_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= domainPasswordRulesFields_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      domainPasswordRulesFields_.WriteTo(output, _repeated_domainPasswordRulesFields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += domainPasswordRulesFields_.CalculateSize(_repeated_domainPasswordRulesFields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainPasswordRulesResponse other) {
      if (other == null) {
        return;
      }
      domainPasswordRulesFields_.Add(other.domainPasswordRulesFields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            domainPasswordRulesFields_.AddEntriesFrom(input, _repeated_domainPasswordRulesFields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDeviceRequest : pb::IMessage<ApproveUserDeviceRequest> {
    private static readonly pb::MessageParser<ApproveUserDeviceRequest> _parser = new pb::MessageParser<ApproveUserDeviceRequest>(() => new ApproveUserDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceRequest(ApproveUserDeviceRequest other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      encryptedDeviceDataKey_ = other.encryptedDeviceDataKey_;
      denyApproval_ = other.denyApproval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceRequest Clone() {
      return new ApproveUserDeviceRequest(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 2;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceDataKey" field.</summary>
    public const int EncryptedDeviceDataKeyFieldNumber = 3;
    private pb::ByteString encryptedDeviceDataKey_ = pb::ByteString.Empty;
    /// <summary>
    /// required for cloud sso
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceDataKey {
      get { return encryptedDeviceDataKey_; }
      set {
        encryptedDeviceDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "denyApproval" field.</summary>
    public const int DenyApprovalFieldNumber = 4;
    private bool denyApproval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DenyApproval {
      get { return denyApproval_; }
      set {
        denyApproval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (EncryptedDeviceDataKey != other.EncryptedDeviceDataKey) return false;
      if (DenyApproval != other.DenyApproval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (EncryptedDeviceDataKey.Length != 0) hash ^= EncryptedDeviceDataKey.GetHashCode();
      if (DenyApproval != false) hash ^= DenyApproval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedDeviceDataKey);
      }
      if (DenyApproval != false) {
        output.WriteRawTag(32);
        output.WriteBool(DenyApproval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceDataKey);
      }
      if (DenyApproval != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.EncryptedDeviceDataKey.Length != 0) {
        EncryptedDeviceDataKey = other.EncryptedDeviceDataKey;
      }
      if (other.DenyApproval != false) {
        DenyApproval = other.DenyApproval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptedDeviceDataKey = input.ReadBytes();
            break;
          }
          case 32: {
            DenyApproval = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDeviceResponse : pb::IMessage<ApproveUserDeviceResponse> {
    private static readonly pb::MessageParser<ApproveUserDeviceResponse> _parser = new pb::MessageParser<ApproveUserDeviceResponse>(() => new ApproveUserDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceResponse(ApproveUserDeviceResponse other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      failed_ = other.failed_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceResponse Clone() {
      return new ApproveUserDeviceResponse(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 2;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "failed" field.</summary>
    public const int FailedFieldNumber = 3;
    private bool failed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Failed {
      get { return failed_; }
      set {
        failed_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Failed != other.Failed) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Failed != false) hash ^= Failed.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Failed != false) {
        output.WriteRawTag(24);
        output.WriteBool(Failed);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Failed != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Failed != false) {
        Failed = other.Failed;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 24: {
            Failed = input.ReadBool();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDevicesRequest : pb::IMessage<ApproveUserDevicesRequest> {
    private static readonly pb::MessageParser<ApproveUserDevicesRequest> _parser = new pb::MessageParser<ApproveUserDevicesRequest>(() => new ApproveUserDevicesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDevicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesRequest(ApproveUserDevicesRequest other) : this() {
      deviceRequests_ = other.deviceRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesRequest Clone() {
      return new ApproveUserDevicesRequest(this);
    }

    /// <summary>Field number for the "deviceRequests" field.</summary>
    public const int DeviceRequestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.ApproveUserDeviceRequest> _repeated_deviceRequests_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.ApproveUserDeviceRequest.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ApproveUserDeviceRequest> deviceRequests_ = new pbc::RepeatedField<global::Enterprise.ApproveUserDeviceRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ApproveUserDeviceRequest> DeviceRequests {
      get { return deviceRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDevicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDevicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceRequests_.Equals(other.deviceRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceRequests_.WriteTo(output, _repeated_deviceRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceRequests_.CalculateSize(_repeated_deviceRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDevicesRequest other) {
      if (other == null) {
        return;
      }
      deviceRequests_.Add(other.deviceRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceRequests_.AddEntriesFrom(input, _repeated_deviceRequests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDevicesResponse : pb::IMessage<ApproveUserDevicesResponse> {
    private static readonly pb::MessageParser<ApproveUserDevicesResponse> _parser = new pb::MessageParser<ApproveUserDevicesResponse>(() => new ApproveUserDevicesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDevicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesResponse(ApproveUserDevicesResponse other) : this() {
      deviceResponses_ = other.deviceResponses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesResponse Clone() {
      return new ApproveUserDevicesResponse(this);
    }

    /// <summary>Field number for the "deviceResponses" field.</summary>
    public const int DeviceResponsesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.ApproveUserDeviceResponse> _repeated_deviceResponses_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.ApproveUserDeviceResponse.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ApproveUserDeviceResponse> deviceResponses_ = new pbc::RepeatedField<global::Enterprise.ApproveUserDeviceResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ApproveUserDeviceResponse> DeviceResponses {
      get { return deviceResponses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDevicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDevicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceResponses_.Equals(other.deviceResponses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceResponses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceResponses_.WriteTo(output, _repeated_deviceResponses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceResponses_.CalculateSize(_repeated_deviceResponses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDevicesResponse other) {
      if (other == null) {
        return;
      }
      deviceResponses_.Add(other.deviceResponses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceResponses_.AddEntriesFrom(input, _repeated_deviceResponses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserDataKey : pb::IMessage<EnterpriseUserDataKey> {
    private static readonly pb::MessageParser<EnterpriseUserDataKey> _parser = new pb::MessageParser<EnterpriseUserDataKey>(() => new EnterpriseUserDataKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserDataKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKey(EnterpriseUserDataKey other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      userEncryptedDataKey_ = other.userEncryptedDataKey_;
      keyTypeId_ = other.keyTypeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKey Clone() {
      return new EnterpriseUserDataKey(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "userEncryptedDataKey" field.</summary>
    public const int UserEncryptedDataKeyFieldNumber = 2;
    private pb::ByteString userEncryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserEncryptedDataKey {
      get { return userEncryptedDataKey_; }
      set {
        userEncryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyTypeId" field.</summary>
    public const int KeyTypeIdFieldNumber = 3;
    private int keyTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyTypeId {
      get { return keyTypeId_; }
      set {
        keyTypeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserDataKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserDataKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (UserEncryptedDataKey != other.UserEncryptedDataKey) return false;
      if (KeyTypeId != other.KeyTypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (UserEncryptedDataKey.Length != 0) hash ^= UserEncryptedDataKey.GetHashCode();
      if (KeyTypeId != 0) hash ^= KeyTypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserEncryptedDataKey);
      }
      if (KeyTypeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(KeyTypeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserEncryptedDataKey);
      }
      if (KeyTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyTypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserDataKey other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.UserEncryptedDataKey.Length != 0) {
        UserEncryptedDataKey = other.UserEncryptedDataKey;
      }
      if (other.KeyTypeId != 0) {
        KeyTypeId = other.KeyTypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserEncryptedDataKey = input.ReadBytes();
            break;
          }
          case 24: {
            KeyTypeId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserDataKeys : pb::IMessage<EnterpriseUserDataKeys> {
    private static readonly pb::MessageParser<EnterpriseUserDataKeys> _parser = new pb::MessageParser<EnterpriseUserDataKeys>(() => new EnterpriseUserDataKeys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserDataKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKeys(EnterpriseUserDataKeys other) : this() {
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKeys Clone() {
      return new EnterpriseUserDataKeys(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.EnterpriseUserDataKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.EnterpriseUserDataKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EnterpriseUserDataKey> keys_ = new pbc::RepeatedField<global::Enterprise.EnterpriseUserDataKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EnterpriseUserDataKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserDataKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserDataKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserDataKeys other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
